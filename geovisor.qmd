---
title: "Incendios forestales en Costa Rica" 
format: dashboard
orientation: columns
server: shiny
theme: united
---

```{r}
#| label: carga-bibliotecas
#| context: setup
#| warning: false
#| message: false

# Carga de bibliotecas
library(tidyverse)
library(DT)
library(plotly)
library(sf)
library(tmap)
library(shiny)
library(scales)

# Especificar modo interactivo para tmap
tmap_mode("view")

# Parámetros generales
CONFIANZA_MINIMA <- 100
```

```{r}
#| label: carga-datos
#| context: data 
#| warning: false
#| message: false

# Áreas de conservación
areas_conservacion <- st_read(
  "datos/areas-conservacion.gpkg", 
  quiet = TRUE
)

# Incendios
incendios <- st_read(
  "datos/incendios-cr-modis.gpkg", 
  quiet = TRUE
) |>
  mutate(
    acq_date = as.Date(acq_date)
  ) |>
  st_join(
    select(areas_conservacion, nombre_ac),
    join = st_intersects
  )

# Áreas de conservación con estadísticas de incendios
areas_conservacion_incendios <- 
  areas_conservacion |>
  left_join(
    st_drop_geometry(incendios) |>
      count(nombre_ac, name = "incendios_n"),
    by = "nombre_ac"
  ) |>
  mutate(incendios_n = coalesce(incendios_n, 0L))
```

# {.sidebar}

```{r}
#| label: slider-confianza

# Confianza mínima
sliderInput(
  inputId = "confianza_minima", 
  label = "Confianza mínima",
  min = 0, 
  max = 100, 
  value = CONFIANZA_MINIMA, 
  step = 1
)
```

```{r}
#| label: slider-frp

# FRP mínimo y máximo 
frp_minimo <- min(incendios$frp, na.rm = TRUE)
frp_maximo <- max(incendios$frp, na.rm = TRUE)

# Widget deslizador de selección ("sliderInput") de FRP
sliderInput(
  inputId = "frp",
  label   = "Potencia radiativa del fuego - FRP (MW)",
  min     = frp_minimo,   
  max     = frp_maximo,   
  value   = c(frp_minimo, frp_maximo), 
  step    = 1,    
  round   = TRUE, 
  sep     = ""    
)
```

```{r}
#| label: select-satelite

# Lista ordenada de satélites
lista_satelites <- unique(incendios$satellite)
lista_satelites <- sort(lista_satelites)
lista_satelites <- c("Todos", lista_satelites)

selectInput(
  inputId  = "satelite",
  label    = "Satélite",
  choices  = lista_satelites,
  selected = "Todos"
)
```

```{r}
#| label: slider-fecha

# Fechas mínima y máxima
# fecha_minima <- min(incendios$acq_date, na.rm = TRUE)
# fecha_maxima <- max(incendios$acq_date, na.rm = TRUE)
fecha_minima <- "2024-01-01"
fecha_maxima <- "2024-12-31"

dateRangeInput(
  inputId = "fecha",
  label   = "Fecha",
  start   = fecha_minima,
  end     = fecha_maxima,
  min     = fecha_minima,
  max     = fecha_maxima,
  format  = "yyyy-mm-dd",
  weekstart = 1,
  language  = "es"
)
```

```{r}
#| label: select-area-conservacion

# Lista ordenada de áreas de conservación
lista_areas_conservacion <- unique(incendios$nombre_ac)
lista_areas_conservacion <- sort(lista_areas_conservacion)
lista_areas_conservacion <- c("Todas", lista_areas_conservacion)

selectInput(
  inputId  = "area_conservacion",
  label    = "Área de conservación",
  choices  = lista_areas_conservacion,
  selected = "Todas"
)
```

# Mapa 

```{r}
#| label: salida-mapa
#| title: "Mapa"

# Mapa
tmapOutput(
    outputId =  "mapa"
)
```

## Gráficos estadísticos

```{r}
#| label: salida-grafico
#| title: "Cantidad de incendios en áreas de conservación"
#| eval: false

# Gráfico 1
plotlyOutput(
    outputId =  "grafico"
)
```

# Tabla

```{r}
#| label: salida-tabla
#| title: "Tabla"

# Tabla
dataTableOutput(
    outputId =  "tabla"
)
```

```{r}
#| label: servidor
#| context: server

# Función reactiva para filtrar los datos de incendios
# de acuerdo con los filtros especificados por el usuario
filtrar_incendios <- reactive({
  # Se inicia con los datos de incendios sin filtrar
  incendios_filtrados <- incendios

  # Filtrar por confianza mínima
  incendios_filtrados <-
    incendios_filtrados |>
    filter(confidence >= input$confianza_minima)
  
  # Filtrar por rango de fechas
  incendios_filtrados <- 
    incendios_filtrados |>
    filter(
      acq_date >= input$fecha[1],
      acq_date <= input$fecha[2]
    )

  # Filtrar por FRP
  incendios_filtrados <-
    incendios_filtrados |>
    filter(frp >= input$frp[1] & frp <= input$frp[2])

  # Filtrar por satélite
  if (input$satelite != "Todos") {
    incendios_filtrados <-
      incendios_filtrados |>
      filter(satellite == input$satelite)
  }
  
  # Filtrar por área de conservación
  if (input$area_conservacion != "Todas") {
    incendios_filtrados <-
      incendios_filtrados |>
      filter(nombre_ac == input$area_conservacion)
  }
  
  return(incendios_filtrados)
})

# Función reactiva para filtrar los datos de áreas de conservación
# con estadísticas de incendios de acuerdo con los filtros especificados por el usuario
filtrar_areas_conservacion_incendios <- reactive({
  # Se inicia con los datos de incendios sin filtrar
  incendios_filtrados <- filtrar_incendios()
  
  # Áreas de conservación con estadísticas de incendios
  areas_conservacion_incendios_filtradas <- 
    areas_conservacion |>
  left_join(
    st_drop_geometry(incendios_filtrados) |>
      count(nombre_ac, name = "incendios_n"),
    by = "nombre_ac"
  ) |>
  mutate(incendios_n = coalesce(incendios_n, 0L))
  
  return(areas_conservacion_incendios_filtradas)
})

# Tabla interactiva
output$tabla <- renderDataTable({
  # Filtrado del conjunto de datos
  incendios_filtrados <- filtrar_incendios()
  
   # Definir la tabla
  tabla <- 
    incendios_filtrados |>
      st_drop_geometry() |>
      dplyr::select(nombre_ac, acq_date, acq_time, daynight, satellite, frp, brightness, bright_t31, confidence) |>
      arrange(desc(acq_date)) |>                 
      datatable(
        rownames = FALSE,
        colnames = c("AC", "Fecha", "Hora", "Día/Noche", "Satélite", "FRP (MW)", "Brillantez", "Brillo T31", "Confianza"),
        options = list(                 
          pageLength = 10,
          language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
        )    
      )
  
  # Mostrar la tabla
  tabla
})

# Gráfico interactivo
output$grafico <- renderPlotly({
  # Filtrar el conjunto de datos
  areas_conservacion_incendios_filtradas <- 
    filtrar_areas_conservacion_incendios()
  
  # Definir el gráfico ggplot2
  g <- areas_conservacion_incendios_filtradas |>
    ggplot(
      aes(x = reorder(nombre_ac, incendios_n), y = incendios_n)
    ) +
    geom_col(
      aes(
        text = paste0("Cantidad de incendios: ", incendios_n)
      ),
      fill = "red"
    ) +
    xlab("Área de conservación") +
    ylab("Cantidad de incendios") +
    coord_flip() +
    theme_minimal()
  
 # Mostrar el gráfico plotly
 ggplotly(g, tooltip = "text") |> 
   config(locale = 'es')
})

# Mapa interactivo
output$mapa <- renderTmap({
  # Filtrar conjuntos de datos
  incendios_filtrados <- 
    filtrar_incendios()
  areas_conservacion_incendios_filtradas <- 
    filtrar_areas_conservacion_incendios()
  
  # Definir el mapa
  tm_basemap("OpenStreetMap") +
  tm_shape(areas_conservacion_incendios_filtradas, name = "Áreas de conservación") +
    tm_polygons(
      fill = "incendios_n",
      fill.scale  = tm_scale_intervals(style = "quantile", values = "Reds"),
      fill.legend = tm_legend(title = "Cantidad de incendios"),
      fill_alpha = 0.3,
      id = "nombre_ac",
      popup.vars = c("AC" = "nombre_ac", "Incendios" = "incendios_n")
    ) +
    tm_borders(col = "darkgreen", lwd = 1.5) +
  tm_shape(incendios_filtrados, name = "Incendios") +
    tm_dots(
      fill = "frp",
      fill.scale = tm_scale_intervals(
        style  = "quantile",
        values = "inferno"
      ),
      fill.legend = tm_legend(title = "FRP (MW)"),
      size = 0.5,
      id = "frp",
      popup.vars = c(
        "Fecha"="acq_date", 
        "Hora"="acq_time",
        "Satélite"="satellite", 
        "FRP (MW)"="frp",
        "Confianza"="confidence", 
        "Día/Noche"="daynight",
        "AC" = "nombre_ac"
      )
    ) +
    tm_scalebar(position = c("left", "bottom")) +
    tm_compass(position = c("right","top")) +
    tm_view(bbox = st_bbox(incendios_filtrados))
  })
```